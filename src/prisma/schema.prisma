generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id   Int     @id @default(autoincrement())
  uuid String  @unique
  absences Absence[]
  promotions Promotion[]
  syllabus Syllabus[]
  contracts Contract[]
  legalFiles LegalFile[]
  offers Offer[]
  notifications NotificationSettings[]
}

model Absence {
  id Int @id @default(autoincrement())
  startDate DateTime
  endDate DateTime
  reason String
  user User @relation(fields: [userId], references: [id])
  userId Int
}

model Dei {
  id Int @id @default(autoincrement())
  idNeed Int
  idBill Int
  hourlyPrice Float
  totalPrice Float
  status Boolean
  sashaStatus Int
  purchaseOrder PurchaseOrder[]
}

model Subject {
  id Int @id @default(autoincrement())
  name String
  level String
  category String
  syllabus Syllabus[]
  needs Need[]
  hourlyRates HourlyRate[]
}

model Promotion {
  id Int @id @default(autoincrement())
  schoolYear Int
  name String
  managerId Int
  manager User @relation(fields: [managerId], references: [id])
  needs Need[]
}

model Company {
  id Int @id @default(autoincrement())
  userId Int
  name String
  phone String
  mail String
  contributorList Contributor[]
  createdAt DateTime @default(now())
}

model Contributor {
  id Int @id @default(autoincrement())
  companyId Int
  firstName String
  lastName String
  phone String
  mail String
  status Int
  company Company @relation(fields: [companyId], references: [id])
  needs Need[]
  legalFiles LegalFile[]
  offers Offer[]
  dispensations Dispensation[]
  quotations Quotation[]
}

model Syllabus {
  id Int @id @default(autoincrement())
  subjectId Int
  authorId Int
  offerId Int
  file String
  createdAt DateTime @default(now())
  user User? @relation(fields: [authorId], references: [id])
  subject Subject? @relation(fields: [subjectId], references: [id])
  offer Offer @relation(fields: [offerId], references: [id])
}

model Offer {
  id Int @id @default(autoincrement())
  authorId Int
  contributorId Int
  needId Int
  syllabus Syllabus[]
  ptf String
  status Int
  hourlyPrice Float
  user User @relation(fields: [authorId], references: [id])
  quotations Quotation[]
  contributor Contributor @relation(fields: [contributorId], references: [id])
}

model Need {
  id Int @id @default(autoincrement())
  idSubject Int
  idPromotion Int
  status Int
  idContributor Int
  hoursVolume Int
  subject Subject? @relation(fields: [idSubject], references: [id])
  promotion Promotion? @relation(fields: [idPromotion], references: [id])
  contributor Contributor? @relation(fields: [idContributor], references: [id])
}

model School {
  id Int @id @default(autoincrement())
  name String
  yearlyBudget Float
}

model Bill {
  id Int @id @default(autoincrement())
  contractId Int
  total Float
  status Int
  validity Boolean
  contract Contract @relation(fields: [contractId], references: [id])
}

model Contract {
  id Int @id @default(autoincrement())
  signatoryId Int
  hourlyPrice Float
  hoursVolume Int
  total Float
  status Int
  startDate DateTime
  endDate DateTime
  signatory User @relation(fields: [signatoryId], references: [id])
  bills Bill[]
}

model LegalFile {
  id Int @id @default(autoincrement())
  contributorId Int
  uploaderId Int
  name String
  file String
  type Int
  createdAt DateTime @default(now())
  user User @relation(fields: [uploaderId], references: [id])
  contributor Contributor @relation(fields: [contributorId], references: [id])
}

model NotificationSettings {
  id Int @id @default(autoincrement())
  userId Int
  frequency Int
  status Int
  user User @relation(fields: [userId], references: [id])
}

model HourlyRate {
  id Int @id @default(autoincrement())
  level String
  subjectId Int
  rate Float
  subject Subject @relation(fields: [subjectId], references: [id])
}

model Quotation {
  id Int @id @default(autoincrement())
  price Float
  status Boolean
  offerId Int
  contributorId Int
  contributor Contributor @relation(fields: [contributorId], references: [id])
  offer Offer @relation(fields: [offerId], references: [id])
  purchaseOrder PurchaseOrder[]
  date DateTime
}

model Dispensation {
  id Int @id @default(autoincrement())
  contributorId Int
  oldPrice Float
  newPrice Float
  status Boolean
  date DateTime
  contributor Contributor @relation(fields: [contributorId], references: [id])
}

model PurchaseOrder{
  id Int @id @default(autoincrement())
  deiId Int
  quotationId Int
  description String
  quotation Quotation @relation(fields: [quotationId], references: [id])
  dei Dei @relation(fields: [deiId], references: [id])
}